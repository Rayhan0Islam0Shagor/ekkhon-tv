import Head from "next/head";
import Link from "next/link";
import dynamic from "next/dynamic";
import useSWR from "swr";
import axios from "axios";
import Loading from "@/components/Loading";
// import { useEffect, useState } from "react";
// import CryptoJS from "crypto-js";

const CsrNewsCard = dynamic(() => import("@/components/CsrNewsCard"), {
  ssr: false,
});

const fetcher = (url) => axios.get(url).then((res) => res.data.data);

export default function CSR() {
  // const [enCryptedData, setEnCryptedData] = useState([]);

  const { data, isLoading } = useSWR(
    "https://backoffice.ekhon.tv/api/json/file/generateSpecial1.json",
    fetcher
  );

  // const SECRET_KEY =
  //   "!S+;3o &rVkk/H=Jy$-oN@`C?Qd|2_0;H5! ^q] $+TD)y`*r_p=*`^lB8x,tBR>";

  // const encryptData = (name, data) => {
  //   const encrypted = CryptoJS.AES.encrypt(
  //     JSON.stringify(data),
  //     SECRET_KEY
  //   ).toString();
  //   localStorage.setItem(name, encrypted);
  // };

  // const decryptData = (name) => {
  //   const encrypted = localStorage.getItem(name);
  //   const decrypted = CryptoJS.AES.decrypt(encrypted, SECRET_KEY).toString(
  //     CryptoJS.enc.Utf8
  //   );

  //   return JSON.parse(decrypted);
  // };

  // useEffect(() => {
  //   if (data) {
  //     encryptData("data", data);
  //   }

  //   if (localStorage.getItem("data")) {
  //     const data = decryptData("data");
  //     setEnCryptedData(data);
  //   }
  // }, []);

  // useEffect(() => {
  //   try {
  //     const fetchData = async () => {
  //       const res = await fetch(
  //         "https://backoffice.ekhon.tv/api/json/file/generateSpecial1.json"
  //       );
  //       const data = await res.json();

  //       setData(data.data);
  //     };

  //     fetchData();
  //   } catch (error) {
  //     console.log("üöÄ ~ file: index.js:22 ~ useEffect ~ error", error);
  //   }
  // }, []);

  return (
    <>
      <Head>
        <title>Client Side | Ekhon TV :: ‡¶è‡¶ñ‡¶® ‡¶ü‡¶ø‡¶≠‡¶ø</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://ekhon.tv/media/common/favicon2.png" />
        <meta
          name="keywords"
          content="‡¶è‡¶ñ‡¶® ‡¶ü‡¶ø‡¶≠‡¶ø,‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶¶‡ßá‡¶∂‡ßá ‡¶è‡¶ñ‡¶®, ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶ï‡¶æ‡¶ö‡¶æ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶Æ‡ßÅ‡¶¶‡ßç‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßã, ‡¶¨‡¶ø‡¶¶‡ßá‡¶∂‡ßá ‡¶è‡¶ñ‡¶®, ‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü, ‡¶´‡ßÅ‡¶ü‡¶¨‡¶≤, ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶†‡ßá, ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶®‡¶®‡ßç‡¶¶, ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ, ‡¶®‡¶æ‡¶ü‡¶ï, ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø, ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï‡¶§‡¶æ, ‡¶™‡¶æ‡¶†‡¶ï‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ, ‡¶ö‡¶≤‡¶§‡¶ø ‡¶π‡¶æ‡¶ì‡ßü‡¶æ, ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂, ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ, ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ï‡ßç‡¶§‡¶æ"
        />
      </Head>

      <div className="flex items-center justify-center w-full py-5">
        <Link
          href="/"
          className="px-4 py-2 transition-all duration-500 border border-indigo-400 hover:bg-indigo-400"
        >
          Check server side rendering
        </Link>
      </div>

      <main className="container grid h-full grid-cols-6 gap-3 px-4 mx-auto mb-2 lg:px-0 lg:gap-6 lg:grid-cols-3">
        {/* loading skeleton */}
        {isLoading && (
          <>
            {new Array(6).fill("loading...").map((_, index) => (
              <Loading key={index} />
            ))}
          </>
        )}

        {data?.map(
          (
            {
              CategoryID,
              CategoryName,
              ContentBrief,
              ContentHeading,
              ImageBgPath,
              ImageSmPath,
              ImageThumbPath,
              ShowVideo,
              Slug,
              URLAlies,
              VideoID,
              created_at,
              VideoType,
            },
            index
          ) => (
            <CsrNewsCard
              key={index}
              CategoryID={CategoryID}
              CategoryName={CategoryName}
              ContentBrief={ContentBrief}
              ContentHeading={ContentHeading}
              ImageBgPath={ImageBgPath}
              ImageSmPath={ImageSmPath}
              ImageThumbPath={ImageThumbPath}
              ShowVideo={ShowVideo}
              Slug={Slug}
              URLAlies={URLAlies}
              VideoID={VideoID}
              created_at={created_at}
              VideoType={VideoType}
              index={index}
            />
          )
        )}
      </main>
    </>
  );
}
