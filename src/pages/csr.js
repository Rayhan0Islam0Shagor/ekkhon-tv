import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useState } from "react";
import useSWR from "swr";
import axios from "axios";
import { motion } from "framer-motion";

const fetcher = (url) => axios.get(url).then((res) => res.data.data);

export default function CSR() {
  // const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  const { data, isLoading } = useSWR(
    "https://backoffice.ekhon.tv/api/json/file/generateSpecial1.json",
    fetcher
  );

  // useEffect(() => {
  //   try {
  //     const fetchData = async () => {
  //       const res = await fetch(
  //         "https://backoffice.ekhon.tv/api/json/file/generateSpecial1.json"
  //       );
  //       const data = await res.json();

  //       setData(data.data);
  //     };

  //     fetchData();
  //   } catch (error) {
  //     console.log("üöÄ ~ file: index.js:22 ~ useEffect ~ error", error);
  //   }
  // }, []);

  return (
    <>
      <Head>
        <title>Client Side | Ekhon TV :: ‡¶è‡¶ñ‡¶® ‡¶ü‡¶ø‡¶≠‡¶ø</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="https://ekhon.tv/media/common/favicon2.png" />
        <meta
          name="keywords"
          content="‡¶è‡¶ñ‡¶® ‡¶ü‡¶ø‡¶≠‡¶ø,‡¶Ö‡¶®‡¶≤‡¶æ‡¶á‡¶® ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶™‡¶§‡ßç‡¶∞‡¶ø‡¶ï‡¶æ, ‡¶¶‡ßá‡¶∂‡ßá ‡¶è‡¶ñ‡¶®, ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶ï‡¶æ‡¶ö‡¶æ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶Æ‡ßÅ‡¶¶‡ßç‡¶∞‡¶æ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶∂‡ßá‡ßü‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶Ü‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶ú‡¶æ‡¶§‡¶ø‡¶ï ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞, ‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü‡ßã, ‡¶¨‡¶ø‡¶¶‡ßá‡¶∂‡ßá ‡¶è‡¶ñ‡¶®, ‡¶ï‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶ü, ‡¶´‡ßÅ‡¶ü‡¶¨‡¶≤, ‡¶è‡¶ñ‡¶® ‡¶Æ‡¶æ‡¶†‡ßá, ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶®‡¶®‡ßç‡¶¶, ‡¶∏‡¶ø‡¶®‡ßá‡¶Æ‡¶æ, ‡¶®‡¶æ‡¶ü‡¶ï, ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø, ‡¶®‡¶æ‡¶ó‡¶∞‡¶ø‡¶ï ‡¶∏‡¶æ‡¶Ç‡¶¨‡¶æ‡¶¶‡¶ø‡¶ï‡¶§‡¶æ, ‡¶™‡¶æ‡¶†‡¶ï‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ, ‡¶ö‡¶≤‡¶§‡¶ø ‡¶π‡¶æ‡¶ì‡ßü‡¶æ, ‡¶™‡¶∞‡¶ø‡¶¨‡ßá‡¶∂, ‡¶Ü‡¶¨‡¶π‡¶æ‡¶ì‡ßü‡¶æ, ‡¶â‡¶¶‡ßç‡¶Ø‡ßã‡¶ï‡ßç‡¶§‡¶æ"
        />
      </Head>

      <div className="flex items-center justify-center w-full py-5">
        <Link
          href="/"
          className="px-4 py-2 transition-all duration-500 border border-indigo-400 hover:bg-indigo-400"
        >
          Check server side rendering
        </Link>
      </div>

      <main className="container grid h-full grid-cols-6 gap-3 px-4 mx-auto mb-2 lg:px-0 lg:gap-6 lg:grid-cols-3">
        {/* loading skeleton */}
        {isLoading && (
          <>
            {new Array(6).fill("loading...").map((_, index) => (
              <div
                className="flex items-center justify-center w-full h-full col-span-6 md:col-span-3 lg:col-span-1"
                key={index}
              >
                <div className="flex flex-col items-start justify-start w-full h-full overflow-hidden border rounded-lg shadow-lg">
                  <div className="w-full h-56 mb-2 bg-gray-400 animate-pulse" />
                  <h3 className="w-full h-4 mb-2 bg-gray-500 animate-pulse rounded-xl " />
                  <p className="w-3/4 h-3 mb-1 bg-gray-500 animate-pulse rounded-xl " />
                  <p className="w-2/4 h-3 mb-1 bg-gray-500 animate-pulse rounded-xl " />
                  <p className="w-1/4 h-3 mb-1 bg-gray-500 animate-pulse rounded-xl " />
                </div>
              </div>
            ))}
          </>
        )}

        {data?.map(
          (
            {
              CategoryID,
              CategoryName,
              ContentBrief,
              ContentHeading,
              ImageBgPath,
              ImageSmPath,
              ImageThumbPath,
              ShowVideo,
              Slug,
              URLAlies,
              VideoID,
              created_at,
              VideoType,
            },
            index
          ) => (
            <motion.div
              initial={{ opacity: 0, y: 25 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: index * 0.3, duration: 0.5 }}
              className="flex items-center justify-center w-full h-full col-span-6 md:col-span-3 lg:col-span-1"
              key={Slug + "_" + created_at}
            >
              <div className="flex flex-col items-start justify-start w-full h-full overflow-hidden border rounded-lg shadow-lg">
                <div className="relative flex items-center justify-center w-full border-b">
                  <Image
                    height={630}
                    width={1200}
                    alt={ContentHeading}
                    src={`https://backoffice.ekhon.tv/media/imgAll/${ImageBgPath}`}
                    className={`w-full h-auto transition-opacity duration-200 ${
                      loading ? "opacity-0" : "opacity-100"
                    }`}
                    onLoad={() => {
                      setLoading(false);
                    }}
                    priority
                    placeholder="blur"
                    blurDataURL={`https://backoffice.ekhon.tv/media/imgAll/${ImageSmPath}`}
                  />
                  {loading && (
                    <div className="absolute top-0 left-0 w-full h-full bg-gray-100 animate-pulse" />
                  )}
                </div>

                <div className="flex flex-col flex-1">
                  <div className="flex-1 w-full p-4 border-b">
                    <h1 className="pb-2 text-xl font-semibold">
                      {ContentHeading}
                    </h1>
                    <p className="py-1 text-sm">{ContentBrief}</p>
                  </div>

                  <div className="flex flex-row-reverse items-center justify-between w-full p-4">
                    <span>
                      {new Date(created_at).toLocaleDateString("bn-BD", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                      }) + " "}
                    </span>

                    <button
                      type="button"
                      className="px-4 py-2 text-white bg-gray-800 rounded-lg hover:bg-gray-700 active:bg-gray-600"
                    >
                      {CategoryName}
                    </button>
                  </div>
                </div>
              </div>
            </motion.div>
          )
        )}
      </main>
    </>
  );
}
